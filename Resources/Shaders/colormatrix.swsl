//This is for handling transformations
//caused by DM colour matrices: https://secure.byond.com/docs/ref/#/{notes}/color-matrix
//In general, our code should try to avoid using this shader, in favour of the 'modulate' Color parameter available in some RT/Clyde drawing routines.
//This should only be used for color transformations that can only be expressed as the linear algebra nonsense featured below.

uniform lowp mat4 colorMatrix;
uniform lowp vec4 offsetVector; // The final row of the 4x5 matrix it kinda is
void fragment() {
    highp vec4 oldColor = zTexture(UV);
	//Even though mat4s are supposed to be COLUMN first,
	//Clyde has done something devilish, and swapped it back via a transpose
	//so this is actually row-first.
    COLOR[0] =  oldColor[0] * colorMatrix[0][0] + 
                oldColor[1] * colorMatrix[1][0] + 
                oldColor[2] * colorMatrix[2][0] + 
                oldColor[3] * colorMatrix[3][0];
				
    COLOR[1] =  oldColor[0] * colorMatrix[0][1] + 
                oldColor[1] * colorMatrix[1][1] + 
                oldColor[2] * colorMatrix[2][1] + 
                oldColor[3] * colorMatrix[3][1];
				
    COLOR[2] =  oldColor[0] * colorMatrix[0][2] + 
                oldColor[1] * colorMatrix[1][2] + 
                oldColor[2] * colorMatrix[2][2] + 
                oldColor[3] * colorMatrix[3][2];
				
    COLOR[3] =  oldColor[0] * colorMatrix[0][3] + 
                oldColor[1] * colorMatrix[1][3] + 
                oldColor[2] * colorMatrix[2][3] + 
                oldColor[3] * colorMatrix[3][3];
    COLOR = COLOR + offsetVector;
}